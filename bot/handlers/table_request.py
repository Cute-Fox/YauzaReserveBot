from __future__ import annotations

from dataclasses import dataclass
from datetime import date, time
from telebot import TeleBot, types
from sqlalchemy.ext.asyncio import async_sessionmaker

from bot.utils.dateparse import DATE_FMT, parse_date, parse_time
from bot.services import user_service
from bot.services.table_service import save_table  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!
from bot.utils.keyboards import main_menu
from bot.utils.notifier import notify_managers
from bot.async_app import schedule

@dataclass(slots=True)
class TableRequestData:
    date: date | None = None
    time: time | None = None
    guests: int | None = None
    phone: str | None = None

def register(bot: TeleBot, sm: async_sessionmaker) -> None:
    def _ask_date(message: types.Message) -> None:
        data = TableRequestData()
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):"
        )
        bot.register_next_step_handler(msg, _save_date, data)

    @bot.message_handler(func=lambda m: m.text == "‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
    def handle_table_start(message: types.Message) -> None:
        _ask_date(message)

    def _save_date(message: types.Message, data: TableRequestData) -> None:
        try:
            data.date = parse_date(message.text)
        except ValueError:
            msg = bot.send_message(
                message.chat.id,
                "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–¥–¥.–º–º.–≥–≥–≥–≥):"
            )
            return bot.register_next_step_handler(msg, _save_date, data)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 19:30):")
        bot.register_next_step_handler(msg, _save_time, data)

    def _save_time(message: types.Message, data: TableRequestData) -> None:
        try:
            data.time = parse_time(message.text)
        except ValueError:
            msg = bot.send_message(message.chat.id, "–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return bot.register_next_step_handler(msg, _save_time, data)
        msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –±—É–¥–µ—Ç? (—á–∏—Å–ª–æ):")
        bot.register_next_step_handler(msg, _save_guests, data)

    def _save_guests(message: types.Message, data: TableRequestData) -> None:
        if not message.text.isdigit() or int(message.text) <= 0:
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π:")
            return bot.register_next_step_handler(msg, _save_guests, data)
        data.guests = int(message.text)
        msg = bot.send_message(message.chat.id, "–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:")
        bot.register_next_step_handler(msg, _save_phone, data)

    def _save_phone(message: types.Message, data: TableRequestData) -> None:
        data.phone = message.text.strip()
        _finish_dialog(message, data)

    def _finish_dialog(message: types.Message, data: TableRequestData) -> None:
        tg_id = message.from_user.id

        async def _save():
            async with sm() as session:
                await user_service.ensure_user(session, message.from_user)
                user = await user_service.get_user(session, tg_id)
                await save_table(
                    session,
                    user_id=user.id,
                    reserve_date=data.date,
                    reserve_time=data.time,
                    guests=data.guests,
                    phone=data.phone,
                )
                return user

        def after_save(future):
            user = future.result()
            text = (
                "üçΩ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {data.date.strftime(DATE_FMT)}\n"
                f"‚è∞ –í—Ä–µ–º—è: {data.time}\n"
                f"üë• –ì–æ—Å—Ç–µ–π: {data.guests}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.phone}\n\n"
                f"–ö–ª–∏–µ–Ω—Ç: {user.name} / "
                f"@{message.from_user.username or '‚Äî'}"
            )
            notify_managers(bot, sm, text)

        f = schedule(_save())
        f.add_done_callback(after_save)

        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. "
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏!",
            reply_markup=main_menu()
        )
